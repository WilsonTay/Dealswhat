@model DealsWhat_Admin.Models.Deal

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<div class="row">
    <div class="col-md-12">
        <div class="portlet light">
            <div class="portlet-title">
                <div class="caption">
                    <i class="icon-equalizer font-red-sunglo"></i>
                    <span class="caption-subject font-red-sunglo bold uppercase">Form Sample</span>
                    <span class="caption-helper">form actions on top...</span>
                </div>
                <div class="actions">
                    <a class="btn btn-circle btn-icon-only btn-default" href="javascript:;">
                        <i class="icon-cloud-upload"></i>
                    </a>
                    <a class="btn btn-circle btn-icon-only btn-default" href="javascript:;">
                        <i class="icon-wrench"></i>
                    </a>
                    <a class="btn btn-circle btn-icon-only btn-default" href="javascript:;">
                        <i class="icon-trash"></i>
                    </a>
                </div>
            </div>
            <div class="portlet-body form">
                @using (Html.BeginForm("Create", "Deal", FormMethod.Post, new { enctype = "multipart/form-data", @class = "dropzone2 form-horizontal" }))
                {
                    <div class="form-body">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true)
                        @Html.HiddenFor(model => model.Id, new { @Value = @Model.Id })
                        <div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ShortTitle, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.ShortTitle, new { required = "", @class = "form-control input-lg", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.ShortTitle)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LongTitle, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.TextAreaFor(model => model.LongTitle, new { @class = "form-control", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.LongTitle)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ShortDescription, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.ShortDescription, new { required = "", @class = "form-control", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.ShortDescription)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LongDescription, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    <textarea name="LongDescription" id="LongDescription" rows="50" cols="80">
                                        @Html.Raw(Model.LongDescription)
                                    </textarea>
                                    @*      <div id="LongDescription" class="summernote">@Html.Raw(Model.LongDescription)</div>*@
                                    @Html.ValidationMessageFor(model => model.LongDescription)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.RegularPrice, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.RegularPrice, new { required = "", @class = "form-control", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.RegularPrice)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.SpecialPrice, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.SpecialPrice, new { required = "", @class = "form-control", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.SpecialPrice)
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="col-md-3 control-label">Availability Date</label>

                                <div class="col-md-6">
                                    <div id="availability-date" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc">
                                        <i class="glyphicon glyphicon-calendar fa fa-calendar"></i>
                                        <span></span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FinePrint, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    <textarea name="FinePrint" id="FinePrint" rows="50" cols="80">
                                        @Html.Raw(Model.FinePrint)
                                    </textarea>
                                    @*   <div id="FinePrint" class="summernote">@Html.Raw(Model.FinePrint)</div>*@
                                    @Html.ValidationMessageFor(model => model.FinePrint)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Highlight, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    <textarea name="Highlight" id="Highlight" rows="50" cols="80">
                                        @Html.Raw(Model.Highlight)
                                    </textarea>
                                    @*  <div id="Highlight" class="summernote">@Html.Raw(Model.Highlight)</div>*@
                                    @Html.ValidationMessageFor(model => model.Highlight)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.IsFeatured, new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.CheckBoxFor(model => model.IsFeatured, new { @class = "form-control", placeholder = "Deal Name" })
                                    @Html.ValidationMessageFor(model => model.IsFeatured)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Category_Id, "DealCategory", new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.DropDownList("Category_Id", (IEnumerable<SelectListItem>)ViewBag.Category_Id, new { required = "" })
                                    @Html.ValidationMessageFor(model => model.Category_Id)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.Merchant_Id, "Merchant", new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    @Html.DropDownList("Merchant_Id", (IEnumerable<SelectListItem>)ViewBag.Merchant_Id, new { required = "" })
                                    @Html.ValidationMessageFor(model => model.Merchant_Id)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Status, "Status", new { @class = "col-md-3 control-label" })

                                <div class="col-md-6">
                                    <select id="Status" name="Status">
                                        <option value="0">Published</option>
                                        <option value="1">Draft</option>
                                    </select>

                                    @Html.ValidationMessageFor(model => model.Status)
                                </div>
                            </div>

                            @if (!ViewBag.Method.Equals("Edit"))
                            {
                                <div class="row">
                                    <div class="col-md-3"></div>
                                    <div class="col-md-6 portlet portlet-sortable light" style="display: block;">

                                        <div class="portlet-title ui-sortable-handle">
                                            <h4>Deal Options</h4>
                                            <div class="actions">
                                                <a id="add-deal-options-button" href="javascript:;" class="btn btn-circle btn-default btn-sm">
                                                    <i class="fa fa-plus"></i>Add </a>
                                            </div>
                                        </div>
                                        <div class="portlet-body">
                                            <div class="scroller deal-options-panel-list" style="overflow: hidden; width: auto;" data-rail-visible="1" data-rail-color="yellow" data-handle-color="#a1b2bd" data-initialized="1">

                                                <div class="deal-options-panel panel panel-default">
                                                    <div class="panel-body">
                                                        <div class="form-group">

                                                            <div class="col-md-12">
                                                                <input required="" class="deal-option-short-title form-control" value="" placeholder="Please enter short title above" />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <div class="col-md-3">
                                                                Original Price
                                                            </div>
                                                            <div class="col-md-9">
                                                                <input class="deal-option-regular-price form-control" value="0.0" placeholder="Please enter price above" />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <div class="col-md-3">
                                                                Discounted Price
                                                            </div>
                                                            <div class="col-md-9">
                                                                <input class="deal-option-special-price form-control" value="0.0" placeholder="Please enter price above" />
                                                            </div>
                                                        </div>

                                                        <div class="form-group portlet solid purple">
                                                            <div class="portlet-title">
                                                                <div class="caption">
                                                                    <i class="fa fa-gift"></i>Deal Attributes
                                                                </div>
                                                                <div class="actions">
                                                                    <a id="deal-options-add-attributes" class="btn blue btn-sm">
                                                                        <i class="fa fa-pencil"></i>Add </a>
                                                                </div>
                                                            </div>

                                                            <div class="portlet-body">
                                                                <div class="deal-options-attributes">
                                                                    <div class="row deal-options-attribute">
                                                                        <div class="col-md-3">
                                                                            <input class="deal-option-attribute-name form-control" value="Attribute 1" />
                                                                        </div>
                                                                        <div class="col-md-9">
                                                                            <div class="input-group">
                                                                                <input class="form-control deal-option-attribute-values" value="Value 1|Value 2|Value 3" />
                                                                                <span class="input-group-btn">
                                                                                    <input type="button" class="btn red btn-remove-attribute-group" value="Remove" />
                                                                                </span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button type="button" class="form-control btn red btn-remove-deal-option pull-right" disabled>Remove Deal Option</button>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                              
                            }

                            <div class="form-group">

                                <label class="col-md-3 control-label">Deal Images</label>
                                <div class="col-md-6">
                                    <div id="fine-uploader">
                                    </div>
                                    <div class="alert alert-info">
                                        <b>Note: </b>You must create this deal first before you upload images.
                                        <br />
                                        This deal is updated as soon as you have done uploading the image, so there is no need to click Create / Edit after upload.
                                    </div>

                                </div>
                            </div>
                            <p>
                                <input class="btn green" id="create-deal-submit-btn" type="submit" value="@ViewBag.ActionButtonText" />
                            </p>
                        </div>
                    </div>
                }

                <div>
                    <a href="@Url.Action("Index")" class="btn yellow">Back To List</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="@Url.Content("~/Content/css/fineuploader/fine-uploader-new.css")" rel="stylesheet"/>
    <link href="@Url.Content("~/Content/css/animate.css")" rel="stylesheet"/>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="//cdn.ckeditor.com/4.4.7/full/ckeditor.js"></script>
    <script src="@Url.Content("~/Content/js/bootstrap-notify/bootstrap-notify.min.js")"></script>
    <script src="@Url.Content("~/Content/js/fineuploader/jquery.fine-uploader.min.js")"></script>

    <script>
        var baseImageUrl = '@Url.Content("~/Images/")';

        window.onbeforeunload = function () {
            return "Are you sure you wish to leave?";
        };

        function initializeSummernote(element) {
            $(element).summernote({
                onImageUpload: function (files, editor) {
                    sendFile(files[0], $(element));
                }
            });
        }

        //initializeSummernote('#LongDescription');
        //initializeSummernote('#Highlight');
        //initializeSummernote('#FinePrint');

        // send the file

        function sendFile(file, editor) {
            var data = new FormData();
            data.append("file", file);
            $.ajax({
                data: data,
                type: 'POST',
                url: '/api/fileapi/postfile',
                cache: false,
                contentType: false,
                processData: false,
                success: function (json) {
                    var urls = JSON.parse(json);

                    $.each(urls, function (index, url) {
                        var fullUrl = baseImageUrl + url;
                        var node = $("<img class='col-lg-12' src='" + fullUrl + "'/>");
                        $(editor).summernote('insertNode', node[0]);
                    });

                }
            });
        }

        $('.deal-options-attributes').on('click', '.btn-remove-attribute-group', function () {
            $(this).closest('.deal-options-attribute').remove();
        });

        function getDealOptions() {
            var panels = $('.deal-options-panel');
            var deals = [];

            $.each(panels, function (index, panel) {
                var deal = {};

                var shortTitle = $(panel).find('.deal-option-short-title').val();
                var regularPrice = $(panel).find('.deal-option-regular-price').val();
                var specialPrice = $(panel).find('.deal-option-special-price').val();

                deal.ShortTitle = shortTitle;
                deal.RegularPrice = regularPrice;
                deal.SpecialPrice = specialPrice;
                deal.DealAttributes = [];

                var attrRows = $($(panel).find('.deal-options-attributes .row'));

                $.each(attrRows, function (index, attrRow) {
                    var attributeName = $(attrRow).find('.deal-option-attribute-name').val();
                    var attributeValues = $(attrRow).find('.deal-option-attribute-values').val().split('|');

                    $.each(attributeValues, function (index, attributeValue) {
                        var attribute = {};
                        attribute.Name = attributeName;
                        attribute.Value = attributeValue;

                        deal.DealAttributes.push(attribute);
                    });
                });

                deals.push(deal);
            });

            return deals;
        }

        $('.btn-remove-deal-option').click(function () {
            var panel = $(this).closest('.deal-options-panel');
            panel.remove();
        });

        function updateFirstDealOption() {
            var list = $('.deal-options-panel-list');
            var originalPrice = list.first('.deal-options-panel').find('.deal-option-regular-price');
            var specialPrice = list.first('.deal-options-panel').find('.deal-option-special-price');
            var shortTitle = list.first('.deal-options-panel').find('.deal-option-short-title');

            shortTitle.val($('#ShortTitle').val());
            originalPrice.val($('#RegularPrice').val());
            specialPrice.val($('#SpecialPrice').val());
        }

        $('#ShortTitle').change(updateFirstDealOption);

        $('#RegularPrice').change(updateFirstDealOption);

        $('#SpecialPrice').change(updateFirstDealOption);

        $('#deal-options-add-attributes').click(function () {

            var html = getAddAttributeRowDom();
            $(this).closest('.deal-options-panel').find('.deal-options-attributes').append(html);
        });

        $('#add-deal-options-button').click(function () {

            var list = $('.deal-options-panel-list');
            var firstPanel = list.find('.deal-options-panel');
            var panel = firstPanel.clone(true);
            panel.find('.form-control').prop('disabled', false);

            console.log('a');
            $('.deal-options-panel-list').append(panel);
        });

        function getAddAttributeRowDom() {
            return '<div class="row deal-options-attribute">' +
                '<div class="col-md-3"><input class="form-control deal-option-attribute-name" value="Attribute 1" /></div>' +
                '<div class="col-md-9">' +
                '<div class="input-group">' +
                '<input class="form-control deal-option-attribute-values" value="Value 1|Value 2|Value 3" />' +
                '<span class="input-group-btn"><input type="button" class="btn red btn-remove-attribute-group" value="Remove"/></span>' +
                '</div>' +
                '</div>' +
                '</div>';
        }

        $('#create-deal-submit-btn').click(function (e) {

            if (!$('form').valid()) {
                return;
            }

            var dealId = $('#Id').val();
            var shortTitle = $('#ShortTitle').val();
            var longTitle = $('#LongTitle').val();
            var shortDescription = $('#ShortDescription').val();
            var longDescription = CKEDITOR.instances.LongDescription.getData();
            var regularPrice = $('#RegularPrice').val();
            var specialPrice = $('#SpecialPrice').val();
            var finePrint = CKEDITOR.instances.FinePrint.getData();
            var highlight = CKEDITOR.instances.Highlight.getData();

            var categoryId = $('#Category_Id').val();
            var merchantId = $('#Merchant_Id').val();

            var startDate = $('#availability-date').data('daterangepicker').startDate.format('MM-DD-YYYY');
            var endDate = $('#availability-date').data('daterangepicker').endDate.format('MM-DD-YYYY');

            var status = $('#Status').val();

            var deal = {};
            deal.Id = dealId;
            deal.ShortTitle = shortTitle;
            deal.LongTitle = longTitle;
            deal.ShortDescription = shortDescription;
            deal.LongDescription = longDescription;
            deal.RegularPrice = regularPrice;
            deal.SpecialPrice = specialPrice;
            deal.FinePrint = finePrint;
            deal.Highlight = highlight;
            deal.Category_Id = categoryId;
            deal.Merchant_Id = merchantId;
            deal.StartTime = startDate;
            deal.EndTime = endDate;
            deal.Status = status;
            deal.DealOptions = getDealOptions();

            var data = JSON.stringify(deal);
            console.log(deal);
            $.ajax(
            {
                url: '/Deal/Create',
                type: "POST",
                data: data,
                contentType: "application/json; charset=utf-8",
                success: function (data, textStatus, xhr) {

                    if (xhr.status == 200) {

                        @if (!ViewBag.Method.Equals("Edit"))
                        {
                            @Html.Raw("disableCreateButton(); notifyDealCreated();")
                            
                        }
                        else
                        {
                            @Html.Raw("notifyDealEdited();")
                        }
                    }

                }
            });

            e.preventDefault();
        });

        function disableCreateButton() {
            $('#create-deal-submit-btn').prop('disabled', true);
        }

        function notifyDealEdited() {
            $.notify({
                // options
                message: 'Your deal has been edited. You can now go back or continue editing this deal.'
            }, {
                // settings
                type: 'success',
                placement: {
                    from: 'bottom',
                    align: 'center'
                },
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                }
            });
        }

        function notifyDealCreated() {
            $.notify({
                // options
                message: 'Your deal has been created. You can now add images.'
            }, {
                // settings
                type: 'success',
                placement: {
                    from: 'bottom',
                    align: 'center'
                },
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                }
            });
        }

        function notifyFailure(msg) {
            $.notify({
                // options
                message: msg
            }, {
                // settings
                type: 'danger',
                placement: {
                    from: 'bottom',
                    align: 'center'
                },
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                }
            });
        }

        function notifySuccess(msg) {
            $.notify({
                // options
                message: msg
            }, {
                // settings
                type: 'success',
                placement: {
                    from: 'bottom',
                    align: 'center'
                },
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                }
            });
        }

        function fillSampleText() {
            $('#RegularPrice').val('50.00');
            $('#SpecialPrice').val('35.00');

            $('#ShortTitle').val('short title');
            $('#LongTitle').code('long title');

            $('#ShortDescription').val('Short Description Here');
        }

        $(document).ready(function () {
            $('#Category_Id').select2({
                placeholder: "Select an option",
                allowClear: true
            }).addClass("input-lg form-control");

            $('#Merchant_Id').select2({
                placeholder: "Select an option",
                allowClear: true
            }).addClass("input-lg form-control");

            $('#Status').select2({
                placeholder: "Select an option",
                allowClear: true
            }).addClass("input-lg form-control");

            $('#availability-date').data('daterangepicker').setStartDate('@Model.StartTime');
            $('#availability-date').data('daterangepicker').setEndDate('@Model.EndTime');

            $('#Category_Id').select2('val', '@Model.Category_Id');
            $('#Merchant_Id').select2('val', '@Model.Merchant_Id');
            $('#Status').select2('val', '@Model.Status');

            CKEDITOR.replace('FinePrint',
         {
         });
            CKEDITOR.replace('Highlight',
         {
         });
            CKEDITOR.replace('LongDescription',
            {
                filebrowserImageUploadUrl: '/CKEditor/UploadImage/'
            }); //path to “Upload.ashx”
        });


        $('#availability-date').daterangepicker({
            opens: 'left',
            startDate: moment().subtract('days', 29),
            endDate: moment(),
            minDate: '01/01/2015',
            maxDate: '12/31/2016',
            dateLimit: {
                days: 30
            },
            showDropdowns: true,
            showWeekNumbers: true,
            timePicker: false,
            timePickerIncrement: 1,
            timePicker12Hour: true,
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract('days', 1), moment().subtract('days', 1)],
                'Last 7 Days': [moment().subtract('days', 6), moment()],
                'Last 30 Days': [moment().subtract('days', 29), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
            },
            buttonClasses: ['btn'],
            applyClass: 'green',
            cancelClass: 'default',
            format: 'MM/DD/YYYY',
            separator: ' to ',
            locale: {
                applyLabel: 'Apply',
                fromLabel: 'From',
                toLabel: 'To',
                customRangeLabel: 'Custom Range',
                daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                firstDay: 1
            }
        },
            function (start, end) {
                $('#availability-date span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
            }
        );
        //Set the initial state of the picker label
        $('#availability-date span').html(moment().subtract('days', 29).format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));


    </script>

    <script type="text/template" id="qq-template">
        <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
            </div>
            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                <span class="qq-upload-drop-area-text-selector"></span>
            </div>
            <div class="qq-upload-button-selector qq-upload-button">
                <div>Upload a file</div>
            </div>
            <span class="qq-drop-processing-selector qq-drop-processing">
                <span>Processing dropped files...</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
            <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
                <li>
                    <div class="qq-progress-bar-container-selector">
                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
                    <span class="qq-upload-file-selector qq-upload-file"></span>
                    <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                    <span class="qq-upload-size-selector qq-upload-size"></span>
                    <button class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancel</button>
                    <button class="qq-btn qq-upload-retry-selector qq-upload-retry">Retry</button>
                    <button class="qq-btn qq-upload-delete-selector qq-upload-delete">Delete</button>
                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                </li>
            </ul>

            <dialog class="qq-alert-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button class="qq-cancel-button-selector">Close</button>
                </div>
            </dialog>

            <dialog class="qq-confirm-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button class="qq-cancel-button-selector">No</button>
                    <button class="qq-ok-button-selector">Yes</button>
                </div>
            </dialog>

            <dialog class="qq-prompt-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <input type="text">
                <div class="qq-dialog-buttons">
                    <button class="qq-cancel-button-selector">Cancel</button>
                    <button class="qq-ok-button-selector">Ok</button>
                </div>
            </dialog>
        </div>
    </script>
    <script>

        var uploader = new qq.FineUploader({
            debug: true,
            element: document.getElementById('fine-uploader'),
            request: {
                endpoint: '/fineuploader/uploadfile',
                params: {
                    dealId: '@Model.Id'
                }
            },
            callbacks: {
                onComplete: function (id, fileName, obj) {
                    var newFileName = obj.newFileName;

                    uploader.setName(id, newFileName);
                    console.log(newFileName);
                },
                onUpload: function (id, name) {
                    var button = this.getButton(id);

                    console.log(button);
                }
            },
            session: {
                endpoint: '/fineuploader/?dealId=@Model.Id'
            },
            deleteFile: {
                enabled: true,
                endpoint: '/fineuploader/deletefile'
            },
            retry: {
                enableAuto: true
            }
        });

        $('.qq-upload-button-selector').after('&nbsp;<button id="btn-set-main-image" type="button" class="btn btn-danger">Set cover image</button>');

        $('.qq-upload-list-selector').on('click', 'li', function (e) {

            $.each($('.qq-upload-list-selector li'), function (index, value) {
                $(value).attr('aria-selected', false);
                $(this).css('border', '');
            });

            $(this).attr('aria-selected', true);
            $(this).css('border', '2px solid rgba(81, 203, 238, 1)');
        });

        $('#btn-set-main-image').click(function (e) {
            var selectedImage = $('.qq-upload-list-selector li[aria-selected=true]');

            if (selectedImage.length == 0) {
                notifyFailure('Please select an image from the list.');
                return;
            }

            var fileId = selectedImage.attr('qq-file-id');
            var fileUuid = uploader.getUuid(fileId);

            $.ajax(
                  {
                      url: '/FineUploader/SetMainImage/' + fileUuid,
                      type: "POST",
                      contentType: "application/json; charset=utf-8",
                      success: function (data, textStatus, xhr) {

                          if (xhr.status == 200) {
                              notifySuccess('Cover image has been updated.');
                          }

                      }
                  });
        });
    </script>
}
